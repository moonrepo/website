/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LlmsFullDottxtRouteImport } from './routes/llms-full[.]txt'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LlmsMdxSplatRouteImport } from './routes/llms-mdx.$'
import { Route as DocsSplatRouteImport } from './routes/docs/$'
import { Route as ApiSearchRouteImport } from './routes/api/search'

const LlmsFullDottxtRoute = LlmsFullDottxtRouteImport.update({
  id: '/llms-full.txt',
  path: '/llms-full.txt',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LlmsMdxSplatRoute = LlmsMdxSplatRouteImport.update({
  id: '/llms-mdx/$',
  path: '/llms-mdx/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsSplatRoute = DocsSplatRouteImport.update({
  id: '/docs/$',
  path: '/docs/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSearchRoute = ApiSearchRouteImport.update({
  id: '/api/search',
  path: '/api/search',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/llms-full.txt': typeof LlmsFullDottxtRoute
  '/api/search': typeof ApiSearchRoute
  '/docs/$': typeof DocsSplatRoute
  '/llms-mdx/$': typeof LlmsMdxSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/llms-full.txt': typeof LlmsFullDottxtRoute
  '/api/search': typeof ApiSearchRoute
  '/docs/$': typeof DocsSplatRoute
  '/llms-mdx/$': typeof LlmsMdxSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/llms-full.txt': typeof LlmsFullDottxtRoute
  '/api/search': typeof ApiSearchRoute
  '/docs/$': typeof DocsSplatRoute
  '/llms-mdx/$': typeof LlmsMdxSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/llms-full.txt' | '/api/search' | '/docs/$' | '/llms-mdx/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/llms-full.txt' | '/api/search' | '/docs/$' | '/llms-mdx/$'
  id:
    | '__root__'
    | '/'
    | '/llms-full.txt'
    | '/api/search'
    | '/docs/$'
    | '/llms-mdx/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LlmsFullDottxtRoute: typeof LlmsFullDottxtRoute
  ApiSearchRoute: typeof ApiSearchRoute
  DocsSplatRoute: typeof DocsSplatRoute
  LlmsMdxSplatRoute: typeof LlmsMdxSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/llms-full.txt': {
      id: '/llms-full.txt'
      path: '/llms-full.txt'
      fullPath: '/llms-full.txt'
      preLoaderRoute: typeof LlmsFullDottxtRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/llms-mdx/$': {
      id: '/llms-mdx/$'
      path: '/llms-mdx/$'
      fullPath: '/llms-mdx/$'
      preLoaderRoute: typeof LlmsMdxSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/docs/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/search': {
      id: '/api/search'
      path: '/api/search'
      fullPath: '/api/search'
      preLoaderRoute: typeof ApiSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LlmsFullDottxtRoute: LlmsFullDottxtRoute,
  ApiSearchRoute: ApiSearchRoute,
  DocsSplatRoute: DocsSplatRoute,
  LlmsMdxSplatRoute: LlmsMdxSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
